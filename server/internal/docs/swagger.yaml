basePath: /api
definitions:
  domain.AnswerQuestionDTO:
    properties:
      compare_task_id:
        type: integer
      response:
        description: -1,0,1
        type: integer
    type: object
  domain.CreateTagDTO:
    properties:
      title:
        type: string
    type: object
  domain.CreateTaskAnswer:
    properties:
      question:
        $ref: '#/definitions/domain.Question'
      task:
        $ref: '#/definitions/domain.Task'
    type: object
  domain.CreateTaskDTO:
    properties:
      deadline:
        type: string
      description:
        maxLength: 256
        type: string
      estimated:
        maximum: 86400
        minimum: 0
        type: integer
      icon:
        maximum: 16
        minimum: 0
        type: integer
      importance:
        maximum: 10
        minimum: 0
        type: integer
      title:
        maxLength: 64
        type: string
      urgency:
        maximum: 10
        minimum: 0
        type: integer
    required:
    - title
    type: object
  domain.LoginDTO:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  domain.Question:
    properties:
      compare_task_id:
        type: integer
      text:
        type: string
    type: object
  domain.SignupDTO:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  domain.Tag:
    properties:
      id:
        type: integer
      mult:
        type: number
      title:
        type: string
    type: object
  domain.TagPutDTO:
    properties:
      mult:
        type: number
      title:
        type: string
    type: object
  domain.Task:
    properties:
      createdAt:
        type: string
      custom_mult:
        type: number
      deadline:
        type: string
      description:
        type: string
      estimated:
        type: integer
      hi:
        type: number
      icon:
        type: integer
      id:
        type: integer
      importance:
        type: integer
      lo:
        type: number
      title:
        type: string
      urgency:
        type: integer
    type: object
  domain.TaskPutDTO:
    properties:
      deadline:
        type: string
      description:
        type: string
      estimated:
        type: integer
      icon:
        type: integer
      importance:
        maximum: 10
        minimum: 0
        type: integer
      title:
        type: string
      urgency:
        maximum: 10
        minimum: 0
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for hackathon project
  title: HackathonAPI
  version: "0.1"
paths:
  /auth/login:
    post:
      description: Login
      operationId: login
      parameters:
      - description: username
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/domain.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /auth/signup:
    post:
      description: Signup
      operationId: signup
      parameters:
      - description: username
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/domain.SignupDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Signup
      tags:
      - auth
  /tag:
    get:
      description: Get all user's tags
      operationId: get_tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Tag'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all user's tags
      tags:
      - tags
    post:
      description: Add new tag
      operationId: post_tag
      parameters:
      - description: tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/domain.CreateTagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tag'
      security:
      - ApiKeyAuth: []
      summary: Add new tag
      tags:
      - tags
  /tag/{tag_id}:
    delete:
      description: Delete tag
      operationId: delete_tag
      parameters:
      - description: tag id
        in: path
        name: tag_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete tag
      tags:
      - tags
    get:
      description: Get tag by id
      operationId: get_tag_by_id
      parameters:
      - description: tag id
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tag'
      security:
      - ApiKeyAuth: []
      summary: Get tag by id
      tags:
      - tags
    put:
      description: Edit tag
      operationId: put_tag
      parameters:
      - description: tag id
        in: path
        name: tag_id
        required: true
        type: string
      - description: tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/domain.TagPutDTO'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Edit tag
      tags:
      - tags
  /task:
    get:
      description: Get all user tasks
      operationId: get_tasks
      parameters:
      - description: estimated
        in: query
        name: estimated
        type: string
      - description: importance
        in: query
        name: importance
        type: string
      - description: urgency
        in: query
        name: urgency
        type: string
      - description: order field (asc/desc)
        in: query
        name: order
        type: string
      - description: order field (e.g. deadline, estimated, importance)
        in: query
        name: orderBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Task'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all user tasks
      tags:
      - tasks
    post:
      description: Add new task
      operationId: post_task
      parameters:
      - description: task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/domain.CreateTaskDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.CreateTaskAnswer'
      security:
      - ApiKeyAuth: []
      summary: Add new task
      tags:
      - tasks
  /task/{task_id}:
    delete:
      description: Get list of tasks
      operationId: delete_task
      parameters:
      - description: task id
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Get list of tasks
      tags:
      - tasks
    get:
      description: Get task by id
      operationId: get_task_by_id
      parameters:
      - description: task id
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
      security:
      - ApiKeyAuth: []
      summary: Get task by id
      tags:
      - tasks
    put:
      description: Edit task
      operationId: put_task
      parameters:
      - description: task id
        in: path
        name: task_id
        required: true
        type: string
      - description: task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/domain.TaskPutDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
      security:
      - ApiKeyAuth: []
      summary: Edit task
      tags:
      - tasks
  /task/{task_id}/question:
    post:
      description: Answer question to make F more precise
      operationId: answer_task_question
      parameters:
      - description: task id
        in: path
        name: task_id
        required: true
        type: string
      - description: answer question object
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/domain.AnswerQuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Question'
      security:
      - ApiKeyAuth: []
      summary: Answer question
      tags:
      - tasks
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authorization endpoints
  name: auth
- description: Tasks endpoints
  name: tasks
- description: Tags endpoints
  name: tags
