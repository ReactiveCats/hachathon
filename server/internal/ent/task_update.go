// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/internal/ent/predicate"
	"server/internal/ent/tag"
	"server/internal/ent/task"
	"server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetIcon sets the "icon" field.
func (tu *TaskUpdate) SetIcon(i int) *TaskUpdate {
	tu.mutation.ResetIcon()
	tu.mutation.SetIcon(i)
	return tu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIcon(i *int) *TaskUpdate {
	if i != nil {
		tu.SetIcon(*i)
	}
	return tu
}

// AddIcon adds i to the "icon" field.
func (tu *TaskUpdate) AddIcon(i int) *TaskUpdate {
	tu.mutation.AddIcon(i)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetDeadline sets the "deadline" field.
func (tu *TaskUpdate) SetDeadline(t time.Time) *TaskUpdate {
	tu.mutation.SetDeadline(t)
	return tu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeadline(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDeadline(*t)
	}
	return tu
}

// ClearDeadline clears the value of the "deadline" field.
func (tu *TaskUpdate) ClearDeadline() *TaskUpdate {
	tu.mutation.ClearDeadline()
	return tu
}

// SetEstimated sets the "estimated" field.
func (tu *TaskUpdate) SetEstimated(i int) *TaskUpdate {
	tu.mutation.ResetEstimated()
	tu.mutation.SetEstimated(i)
	return tu
}

// SetNillableEstimated sets the "estimated" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEstimated(i *int) *TaskUpdate {
	if i != nil {
		tu.SetEstimated(*i)
	}
	return tu
}

// AddEstimated adds i to the "estimated" field.
func (tu *TaskUpdate) AddEstimated(i int) *TaskUpdate {
	tu.mutation.AddEstimated(i)
	return tu
}

// ClearEstimated clears the value of the "estimated" field.
func (tu *TaskUpdate) ClearEstimated() *TaskUpdate {
	tu.mutation.ClearEstimated()
	return tu
}

// SetImportance sets the "importance" field.
func (tu *TaskUpdate) SetImportance(i int8) *TaskUpdate {
	tu.mutation.ResetImportance()
	tu.mutation.SetImportance(i)
	return tu
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableImportance(i *int8) *TaskUpdate {
	if i != nil {
		tu.SetImportance(*i)
	}
	return tu
}

// AddImportance adds i to the "importance" field.
func (tu *TaskUpdate) AddImportance(i int8) *TaskUpdate {
	tu.mutation.AddImportance(i)
	return tu
}

// SetUrgency sets the "urgency" field.
func (tu *TaskUpdate) SetUrgency(i int8) *TaskUpdate {
	tu.mutation.ResetUrgency()
	tu.mutation.SetUrgency(i)
	return tu
}

// SetNillableUrgency sets the "urgency" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUrgency(i *int8) *TaskUpdate {
	if i != nil {
		tu.SetUrgency(*i)
	}
	return tu
}

// AddUrgency adds i to the "urgency" field.
func (tu *TaskUpdate) AddUrgency(i int8) *TaskUpdate {
	tu.mutation.AddUrgency(i)
	return tu
}

// SetCustomMult sets the "custom_mult" field.
func (tu *TaskUpdate) SetCustomMult(f float64) *TaskUpdate {
	tu.mutation.ResetCustomMult()
	tu.mutation.SetCustomMult(f)
	return tu
}

// SetNillableCustomMult sets the "custom_mult" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCustomMult(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetCustomMult(*f)
	}
	return tu
}

// AddCustomMult adds f to the "custom_mult" field.
func (tu *TaskUpdate) AddCustomMult(f float64) *TaskUpdate {
	tu.mutation.AddCustomMult(f)
	return tu
}

// SetLo sets the "lo" field.
func (tu *TaskUpdate) SetLo(f float64) *TaskUpdate {
	tu.mutation.ResetLo()
	tu.mutation.SetLo(f)
	return tu
}

// AddLo adds f to the "lo" field.
func (tu *TaskUpdate) AddLo(f float64) *TaskUpdate {
	tu.mutation.AddLo(f)
	return tu
}

// SetHi sets the "hi" field.
func (tu *TaskUpdate) SetHi(f float64) *TaskUpdate {
	tu.mutation.ResetHi()
	tu.mutation.SetHi(f)
	return tu
}

// AddHi adds f to the "hi" field.
func (tu *TaskUpdate) AddHi(f float64) *TaskUpdate {
	tu.mutation.AddHi(f)
	return tu
}

// SetTagID sets the "tag_id" field.
func (tu *TaskUpdate) SetTagID(i int) *TaskUpdate {
	tu.mutation.SetTagID(i)
	return tu
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTagID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTagID(*i)
	}
	return tu
}

// ClearTagID clears the value of the "tag_id" field.
func (tu *TaskUpdate) ClearTagID() *TaskUpdate {
	tu.mutation.ClearTagID()
	return tu
}

// SetCreatorID sets the "creator_id" field.
func (tu *TaskUpdate) SetCreatorID(i int) *TaskUpdate {
	tu.mutation.SetCreatorID(i)
	return tu
}

// SetCreator sets the "creator" edge to the User entity.
func (tu *TaskUpdate) SetCreator(u *User) *TaskUpdate {
	return tu.SetCreatorID(u.ID)
}

// SetTaggID sets the "tagg" edge to the Tag entity by ID.
func (tu *TaskUpdate) SetTaggID(id int) *TaskUpdate {
	tu.mutation.SetTaggID(id)
	return tu
}

// SetNillableTaggID sets the "tagg" edge to the Tag entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaggID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetTaggID(*id)
	}
	return tu
}

// SetTagg sets the "tagg" edge to the Tag entity.
func (tu *TaskUpdate) SetTagg(t *Tag) *TaskUpdate {
	return tu.SetTaggID(t.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (tu *TaskUpdate) ClearCreator() *TaskUpdate {
	tu.mutation.ClearCreator()
	return tu
}

// ClearTagg clears the "tagg" edge to the Tag entity.
func (tu *TaskUpdate) ClearTagg() *TaskUpdate {
	tu.mutation.ClearTagg()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Icon(); ok {
		if err := task.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := task.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Estimated(); ok {
		if err := task.EstimatedValidator(v); err != nil {
			return &ValidationError{Name: "estimated", err: fmt.Errorf("ent: validator failed for field \"estimated\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Importance(); ok {
		if err := task.ImportanceValidator(v); err != nil {
			return &ValidationError{Name: "importance", err: fmt.Errorf("ent: validator failed for field \"importance\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Urgency(); ok {
		if err := task.UrgencyValidator(v); err != nil {
			return &ValidationError{Name: "urgency", err: fmt.Errorf("ent: validator failed for field \"urgency\": %w", err)}
		}
	}
	if _, ok := tu.mutation.CreatorID(); tu.mutation.CreatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"creator\"")
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldIcon,
		})
	}
	if value, ok := tu.mutation.AddedIcon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldIcon,
		})
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTitle,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldDescription,
		})
	}
	if tu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDeadline,
		})
	}
	if tu.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDeadline,
		})
	}
	if value, ok := tu.mutation.Estimated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldEstimated,
		})
	}
	if value, ok := tu.mutation.AddedEstimated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldEstimated,
		})
	}
	if tu.mutation.EstimatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: task.FieldEstimated,
		})
	}
	if value, ok := tu.mutation.Importance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldImportance,
		})
	}
	if value, ok := tu.mutation.AddedImportance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldImportance,
		})
	}
	if value, ok := tu.mutation.Urgency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldUrgency,
		})
	}
	if value, ok := tu.mutation.AddedUrgency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldUrgency,
		})
	}
	if value, ok := tu.mutation.CustomMult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldCustomMult,
		})
	}
	if value, ok := tu.mutation.AddedCustomMult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldCustomMult,
		})
	}
	if value, ok := tu.mutation.Lo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldLo,
		})
	}
	if value, ok := tu.mutation.AddedLo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldLo,
		})
	}
	if value, ok := tu.mutation.Hi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldHi,
		})
	}
	if value, ok := tu.mutation.AddedHi(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldHi,
		})
	}
	if tu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaggCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaggTable,
			Columns: []string{task.TaggColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaggIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaggTable,
			Columns: []string{task.TaggColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetIcon sets the "icon" field.
func (tuo *TaskUpdateOne) SetIcon(i int) *TaskUpdateOne {
	tuo.mutation.ResetIcon()
	tuo.mutation.SetIcon(i)
	return tuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIcon(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetIcon(*i)
	}
	return tuo
}

// AddIcon adds i to the "icon" field.
func (tuo *TaskUpdateOne) AddIcon(i int) *TaskUpdateOne {
	tuo.mutation.AddIcon(i)
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetDeadline sets the "deadline" field.
func (tuo *TaskUpdateOne) SetDeadline(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDeadline(t)
	return tuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeadline(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDeadline(*t)
	}
	return tuo
}

// ClearDeadline clears the value of the "deadline" field.
func (tuo *TaskUpdateOne) ClearDeadline() *TaskUpdateOne {
	tuo.mutation.ClearDeadline()
	return tuo
}

// SetEstimated sets the "estimated" field.
func (tuo *TaskUpdateOne) SetEstimated(i int) *TaskUpdateOne {
	tuo.mutation.ResetEstimated()
	tuo.mutation.SetEstimated(i)
	return tuo
}

// SetNillableEstimated sets the "estimated" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEstimated(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetEstimated(*i)
	}
	return tuo
}

// AddEstimated adds i to the "estimated" field.
func (tuo *TaskUpdateOne) AddEstimated(i int) *TaskUpdateOne {
	tuo.mutation.AddEstimated(i)
	return tuo
}

// ClearEstimated clears the value of the "estimated" field.
func (tuo *TaskUpdateOne) ClearEstimated() *TaskUpdateOne {
	tuo.mutation.ClearEstimated()
	return tuo
}

// SetImportance sets the "importance" field.
func (tuo *TaskUpdateOne) SetImportance(i int8) *TaskUpdateOne {
	tuo.mutation.ResetImportance()
	tuo.mutation.SetImportance(i)
	return tuo
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableImportance(i *int8) *TaskUpdateOne {
	if i != nil {
		tuo.SetImportance(*i)
	}
	return tuo
}

// AddImportance adds i to the "importance" field.
func (tuo *TaskUpdateOne) AddImportance(i int8) *TaskUpdateOne {
	tuo.mutation.AddImportance(i)
	return tuo
}

// SetUrgency sets the "urgency" field.
func (tuo *TaskUpdateOne) SetUrgency(i int8) *TaskUpdateOne {
	tuo.mutation.ResetUrgency()
	tuo.mutation.SetUrgency(i)
	return tuo
}

// SetNillableUrgency sets the "urgency" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUrgency(i *int8) *TaskUpdateOne {
	if i != nil {
		tuo.SetUrgency(*i)
	}
	return tuo
}

// AddUrgency adds i to the "urgency" field.
func (tuo *TaskUpdateOne) AddUrgency(i int8) *TaskUpdateOne {
	tuo.mutation.AddUrgency(i)
	return tuo
}

// SetCustomMult sets the "custom_mult" field.
func (tuo *TaskUpdateOne) SetCustomMult(f float64) *TaskUpdateOne {
	tuo.mutation.ResetCustomMult()
	tuo.mutation.SetCustomMult(f)
	return tuo
}

// SetNillableCustomMult sets the "custom_mult" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCustomMult(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetCustomMult(*f)
	}
	return tuo
}

// AddCustomMult adds f to the "custom_mult" field.
func (tuo *TaskUpdateOne) AddCustomMult(f float64) *TaskUpdateOne {
	tuo.mutation.AddCustomMult(f)
	return tuo
}

// SetLo sets the "lo" field.
func (tuo *TaskUpdateOne) SetLo(f float64) *TaskUpdateOne {
	tuo.mutation.ResetLo()
	tuo.mutation.SetLo(f)
	return tuo
}

// AddLo adds f to the "lo" field.
func (tuo *TaskUpdateOne) AddLo(f float64) *TaskUpdateOne {
	tuo.mutation.AddLo(f)
	return tuo
}

// SetHi sets the "hi" field.
func (tuo *TaskUpdateOne) SetHi(f float64) *TaskUpdateOne {
	tuo.mutation.ResetHi()
	tuo.mutation.SetHi(f)
	return tuo
}

// AddHi adds f to the "hi" field.
func (tuo *TaskUpdateOne) AddHi(f float64) *TaskUpdateOne {
	tuo.mutation.AddHi(f)
	return tuo
}

// SetTagID sets the "tag_id" field.
func (tuo *TaskUpdateOne) SetTagID(i int) *TaskUpdateOne {
	tuo.mutation.SetTagID(i)
	return tuo
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTagID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTagID(*i)
	}
	return tuo
}

// ClearTagID clears the value of the "tag_id" field.
func (tuo *TaskUpdateOne) ClearTagID() *TaskUpdateOne {
	tuo.mutation.ClearTagID()
	return tuo
}

// SetCreatorID sets the "creator_id" field.
func (tuo *TaskUpdateOne) SetCreatorID(i int) *TaskUpdateOne {
	tuo.mutation.SetCreatorID(i)
	return tuo
}

// SetCreator sets the "creator" edge to the User entity.
func (tuo *TaskUpdateOne) SetCreator(u *User) *TaskUpdateOne {
	return tuo.SetCreatorID(u.ID)
}

// SetTaggID sets the "tagg" edge to the Tag entity by ID.
func (tuo *TaskUpdateOne) SetTaggID(id int) *TaskUpdateOne {
	tuo.mutation.SetTaggID(id)
	return tuo
}

// SetNillableTaggID sets the "tagg" edge to the Tag entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaggID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetTaggID(*id)
	}
	return tuo
}

// SetTagg sets the "tagg" edge to the Tag entity.
func (tuo *TaskUpdateOne) SetTagg(t *Tag) *TaskUpdateOne {
	return tuo.SetTaggID(t.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (tuo *TaskUpdateOne) ClearCreator() *TaskUpdateOne {
	tuo.mutation.ClearCreator()
	return tuo
}

// ClearTagg clears the "tagg" edge to the Tag entity.
func (tuo *TaskUpdateOne) ClearTagg() *TaskUpdateOne {
	tuo.mutation.ClearTagg()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Icon(); ok {
		if err := task.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := task.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Estimated(); ok {
		if err := task.EstimatedValidator(v); err != nil {
			return &ValidationError{Name: "estimated", err: fmt.Errorf("ent: validator failed for field \"estimated\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Importance(); ok {
		if err := task.ImportanceValidator(v); err != nil {
			return &ValidationError{Name: "importance", err: fmt.Errorf("ent: validator failed for field \"importance\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Urgency(); ok {
		if err := task.UrgencyValidator(v); err != nil {
			return &ValidationError{Name: "urgency", err: fmt.Errorf("ent: validator failed for field \"urgency\": %w", err)}
		}
	}
	if _, ok := tuo.mutation.CreatorID(); tuo.mutation.CreatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"creator\"")
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Task.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldIcon,
		})
	}
	if value, ok := tuo.mutation.AddedIcon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldIcon,
		})
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTitle,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldDescription,
		})
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDeadline,
		})
	}
	if tuo.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDeadline,
		})
	}
	if value, ok := tuo.mutation.Estimated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldEstimated,
		})
	}
	if value, ok := tuo.mutation.AddedEstimated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldEstimated,
		})
	}
	if tuo.mutation.EstimatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: task.FieldEstimated,
		})
	}
	if value, ok := tuo.mutation.Importance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldImportance,
		})
	}
	if value, ok := tuo.mutation.AddedImportance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldImportance,
		})
	}
	if value, ok := tuo.mutation.Urgency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldUrgency,
		})
	}
	if value, ok := tuo.mutation.AddedUrgency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: task.FieldUrgency,
		})
	}
	if value, ok := tuo.mutation.CustomMult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldCustomMult,
		})
	}
	if value, ok := tuo.mutation.AddedCustomMult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldCustomMult,
		})
	}
	if value, ok := tuo.mutation.Lo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldLo,
		})
	}
	if value, ok := tuo.mutation.AddedLo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldLo,
		})
	}
	if value, ok := tuo.mutation.Hi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldHi,
		})
	}
	if value, ok := tuo.mutation.AddedHi(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: task.FieldHi,
		})
	}
	if tuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaggCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaggTable,
			Columns: []string{task.TaggColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaggIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaggTable,
			Columns: []string{task.TaggColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
