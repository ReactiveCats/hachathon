// Code generated by entc, DO NOT EDIT.

package ent

import (
	"server/internal/ent/schema"
	"server/internal/ent/task"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[0].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescIcon is the schema descriptor for icon field.
	taskDescIcon := taskFields[1].Descriptor()
	// task.DefaultIcon holds the default value on creation for the icon field.
	task.DefaultIcon = taskDescIcon.Default.(int)
	// taskDescComplexity is the schema descriptor for complexity field.
	taskDescComplexity := taskFields[6].Descriptor()
	// task.DefaultComplexity holds the default value on creation for the complexity field.
	task.DefaultComplexity = taskDescComplexity.Default.(int8)
	// task.ComplexityValidator is a validator for the "complexity" field. It is called by the builders before save.
	task.ComplexityValidator = func() func(int8) error {
		validators := taskDescComplexity.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(complexity int8) error {
			for _, fn := range fns {
				if err := fn(complexity); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescPriority is the schema descriptor for priority field.
	taskDescPriority := taskFields[7].Descriptor()
	// task.DefaultPriority holds the default value on creation for the priority field.
	task.DefaultPriority = taskDescPriority.Default.(int8)
	// task.PriorityValidator is a validator for the "priority" field. It is called by the builders before save.
	task.PriorityValidator = func() func(int8) error {
		validators := taskDescPriority.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(priority int8) error {
			for _, fn := range fns {
				if err := fn(priority); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
